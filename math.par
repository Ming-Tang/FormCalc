/~  Based on JS/CC calculator sample. ~/

/~
    This is a four-function calculator, where precedences
    are defined via associativity definitions of tokens.

    IMPORTANT: The Warnings coming up when invoking JS/CC
               are coming from the grammar, and are resolved
               in order to the precedences and associativity
               information passed to each token.
~/


/~ --- Token definitions --- ~/

/~ Characters to be ignored ~/
!   ' |\t' ;

/~ Non-associative tokens ~/
    '\('
    '\)'
    '[0-9]+'                        INT   [* %match = parseInt( %match ); *]
    '[0-9]+\.[0-9]*|[0-9]*\.[0-9]+' FLOAT [* %match = parseFloat( %match ); *]
    ;

/~ Left-associative tokens, lowest precedence ~/
<  '\+'
   '\-';
        
/~ Left-associative tokens, highest precedence ~/
<  '\*'
   '/';

##

/~ --- Grammar specification --- ~/

p:        e            [* alert( %1 ); *]
        ;

e:        e '+' e       [* %% = %1 + %3; *]
        | e '-' e       [* %% = %1 - %3; *]
        | e '*' e       [* %% = %1 * %3; *]
        | e '/' e       [* %% = %1 / %3; *]
        | '-' e   &'*'  [* %% = %2 * -1; *]
        | e2
        ;

e2:       P   e2  &'*'  [* %% = %1 * %2; *]
        | P             [* %% = %1 *]
        ;

P:        Pa
        | N
        ;

Pa:       '(' e ')'      [* %% = %2; *]
        ;

N:        INT
        | FLOAT
        ;
